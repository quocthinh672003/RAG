# POST /reports
import json
import os
import uuid
from fastapi import HTTPException, APIRouter
from app.core.openai_client import client
from app.core.schemas import ReportIn

router = APIRouter(prefix="/reports", tags=["reports"])

# optimized JSON schemas
SCHEMAS = {
    "summary": {
        "type": "object",
        "properties": {
            "title": {"type": "string", "maxLength": 100},
            "summary": {"type": "string", "minLength": 50},
            "key_points": {
                "type": "array",
                "items": {"type": "string", "maxLength": 100},
            },
            "conclusion": {"type": "string", "minLength": 50},
        },
        "required": ["title", "summary", "key_points", "conclusion"],
        "additionalProperties": False,
    },
    "analysis": {
        "type": "object",
        "properties": {
            "topic": {"type": "string", "maxLength": 100},
            "pros": {
                "type": "array",
                "items": {"type": "string", "maxLength": 100},
                "minItems": 1,
                "maxItems": 10,
            },
            "cons": {
                "type": "array",
                "items": {"type": "string", "maxLength": 100},
                "minItems": 1,
                "maxItems": 10,
            },
            "conclusion": {"type": "string", "minLength": 50},
        },
        "required": ["topic", "pros", "cons", "conclusion"],
        "additionalProperties": False,
    },
}


@router.post("/")
async def create_report(payload: ReportIn):
    """Generate structured report using OpenAI JSON schema"""

    if payload.schema_id not in SCHEMAS:
        raise HTTPException(
            status_code=400,
            detail=f"Invalid schema_id. Available: {list(SCHEMAS.keys())}",
        )

    try:
        # OpenAI Structured Output - optimized
        response = await client.responses.create(
            model=payload.model,
            input=payload.query,
            instructions=f"Generate a {payload.schema_id} report based on the following query: {payload.query}",
            text={
                "type": "json_schema",
                "json_schema": {
                    "name": f"{payload.schema_id}_report",
                    "schema": SCHEMAS[payload.schema_id],
                    "strict": True,
                },
            },
            temperature=0.5,
            max_tokens=2000,
        )

        # get text JSON from output
        #SDK return array output -> content -> text
        out_text = ""
        if response.output:
            for item in response.output:
                for c in getattr(item, "content", []):
                    t = getattr(c, "text", None)
                    if t:
                        out_text += t
        json_data = json.loads(out_text)
        # Generate markdown
        markdown_content = _render_markdown(json_data, payload.schema_id)

        # Save file
        report_id = str(uuid.uuid4())
        filename = f"report_{report_id}.md"
        filepath = f"storage/{filename}"

        os.makedirs("storage", exist_ok=True)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(markdown_content)

        return {
            "report_id": report_id,
            "filename": filename,
            "filepath": filepath,
            "markdown": markdown_content,
            "json": json_data,
        }
    except json.JSONDecodeError as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to parse JSON response: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Error generating report: {str(e)}"
        )


def _render_markdown(json_data: dict, schema_id: str) -> str:
    """Render JSON data to markdown"""
    if schema_id == "summary":
        return f"""# {json_data.get("title", "Summary Report")}

## Summary
{json_data.get("summary", "")}

## Key Points
{chr(10).join(f"- {point}" for point in json_data.get("key_points", []))}

## Conclusion
{json_data.get("conclusion", "")}

---
*Generated by RAG API - {schema_id.title()} Report*
"""
    elif schema_id == "analysis":
        return f"""# {json_data.get("topic", "Analysis Report")}

## Advantages
{chr(10).join(f"- {pro}" for pro in json_data.get("pros", []))}

## Disadvantages
{chr(10).join(f"- {con}" for con in json_data.get("cons", []))}

## Recommendation
{json_data.get("recommendation", "")}

---
*Generated by RAG API - {schema_id.title()} Report*
"""
    return f"# Report\n\n{json.dumps(json_data, indent=2, ensure_ascii=False)}"
